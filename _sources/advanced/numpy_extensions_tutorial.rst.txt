
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 7.8106,  2.9542,  8.4813,  3.3115,  2.3626],
            [13.2359,  8.7090,  7.7173,  1.9214,  5.2154],
            [ 4.5126, 13.4894,  8.8646,  8.5718,  7.5438],
            [11.9511, 12.0663,  7.5026,  3.2998,  7.5788],
            [ 0.1865, 17.6078,  4.6618,  3.8770,  2.1755],
            [11.9511,  3.3526,  2.2859, 12.1853,  7.5788],
            [ 4.5126, 13.1057,  8.1132, 10.5849,  7.5438],
            [13.2359, 12.8578,  5.7520,  6.3483,  5.2154]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8654,  0.5472, -2.0776, -2.1141, -1.2238,  0.2180,  0.0065,  3.0092],
            [-0.2631, -0.4723, -0.2520,  0.4352, -0.5665, -1.3397, -0.2155, -0.7198],
            [ 0.1377,  0.4954,  2.8866,  1.0891, -0.8706,  0.9072,  0.6906,  0.5789],
            [ 1.0054,  0.6817,  0.4149,  1.5041,  0.0972, -0.2085,  0.8297,  0.2954],
            [-0.9435, -1.0806, -0.3737,  0.3606,  0.6156, -0.6236,  1.3485,  1.5600],
            [-0.0614,  0.8085,  2.0583,  2.3868,  0.7929,  0.5977, -0.9268, -1.5650],
            [ 0.6352, -0.3435,  0.1991, -0.2247, -1.2056, -0.3912,  1.3559, -2.0356],
            [-1.2532,  0.0774,  0.1607, -0.8340,  1.0279, -0.4845,  0.1920, -0.3915]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2991,  1.0342,  0.1707],
            [ 0.2603, -2.3932,  0.3937],
            [-0.4491,  0.4541, -0.5741]], requires_grad=True), Parameter containing:
    tensor([[1.8067]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.3109,  8.6414, -1.0913, -3.7618, -2.8242, -2.7589,  5.2651,  0.4613],
            [-2.3560,  0.2461,  1.6336,  3.1014,  4.2994,  6.6412, -2.4780,  1.4587],
            [-0.7853,  1.3410, -2.5522,  2.0707,  4.3682, -3.7982,  3.2226,  2.3962],
            [ 1.4842,  0.9647,  3.7665,  3.2152, -4.4864,  0.4952,  4.5193, -0.5090],
            [ 2.5166,  0.2618,  5.2280,  0.6849,  2.5265,  4.1354, -3.0839,  1.9209],
            [ 1.7931,  4.8527, -1.0863,  2.3801, -0.8358,  0.2491,  2.7603,  4.3173],
            [ 6.9529, -0.8422,  2.1779, -0.0534,  5.5473,  1.0026,  2.0352,  5.5686],
            [ 3.8257,  1.8111, -2.8902,  3.2262, -0.7934,  2.3328,  6.1416,  0.9562]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.7042e+00,  9.6774e-01, -8.0955e-01, -2.1743e+00, -1.2175e+00,
             -2.6626e-01, -6.5672e-01, -3.4330e-01,  2.4401e-03,  1.1201e-02],
            [ 2.0572e+00, -2.2939e+00,  2.6168e+00, -1.8945e+00,  2.3781e+00,
             -2.6549e+00, -3.8089e-01,  8.7521e-01, -2.3740e-01,  3.5118e-02],
            [-1.2585e-01, -2.4419e+00, -3.8491e+00,  8.7822e+00,  1.7368e+00,
             -1.6053e-01,  2.8505e-02,  5.1251e-01,  1.2296e+00,  1.5830e-01],
            [-1.3101e+00, -2.9032e+00,  7.2190e+00, -3.3287e+00, -3.3633e+00,
              4.9681e-01,  3.5009e+00, -1.8447e+00, -2.7322e+00,  3.6792e-01],
            [-1.2859e+00,  1.0950e+00, -3.2434e+00, -9.1315e+00, -5.5812e-01,
              2.1717e+00, -3.9052e+00,  4.9222e+00, -3.3937e-02, -5.3767e-01],
            [-1.2176e-01,  2.7195e+00, -1.1721e+00,  8.8258e+00, -9.9759e-01,
              5.2376e+00, -4.7798e+00,  2.4086e+00,  5.3588e-01,  2.8717e-01],
            [ 7.5033e-01, -1.1986e+00, -3.2477e+00,  9.6665e-01, -1.0829e+00,
             -2.6015e+00,  1.6545e+00, -9.8478e-01, -1.8567e+00,  9.2241e-02],
            [ 2.5225e+00,  2.4284e+00,  7.4169e+00, -2.6277e+00, -2.1250e+00,
              1.7084e+00,  2.4438e+00,  2.9028e+00,  2.0058e+00, -4.8424e-01],
            [ 3.0495e-01, -2.9475e+00, -4.4033e+00,  1.8441e-01,  4.3316e+00,
              1.8516e-01, -2.6160e+00, -2.9404e+00, -7.1449e-01,  3.8608e-01],
            [-8.1021e-01, -7.1011e-03, -3.5199e-01, -1.8038e-01, -7.6833e-01,
              1.3361e-01,  1.9460e-01, -4.2351e-01, -5.5304e-01, -3.4140e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.033 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
